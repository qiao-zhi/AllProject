<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:p="http://www.springframework.org/schema/p" 
     xmlns="http://www.springframework.org/schema/beans" 
     xmlns:context="http://www.springframework.org/schema/context" 
     xmlns:tx="http://www.springframework.org/schema/tx"
      xmlns:aop="http://www.springframework.org/schema/aop" 
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd ">
      


	<!-- 0.连接池属性设置读取指定的properties文件 -->
	<context:property-placeholder location="classpath:db.properties" />	

	<!-- 1.将连接池放入spring容器 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	
	
	<!--2. 配置 Mybatis的会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Mybatis的核心 配置文件所在位置 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
	</bean>
	
	
	
	<!-- 3.1  mapper代理配置方法一   这种方法需要大量重复的配置代理对象
	MapperFactoryBean:根绝mapper接口生成代理对象
	
	<bean id="selectUser" class="org.mybatis.spring.mapper.MapperFactoryBean">
	    <property name="mapperInterface" value="cn.qlq.core.dao.SelectUser"></property>
	    <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	 -->
	 
	 
	 
	 
	 <!-- 3.2通过MapperScannerConfigurer扫描进行批量生成代理对象 
	 	遵循规范:mapper.java和mapper.xml名字一样且在同一个目录下
		自动扫描出来的代理对象的id为mapper类类名（首字母小写）	 
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	     <!-- 指定扫描的包名，如果有多个，用半角逗号分隔 -->
	     <property name="basePackage" value="cn.xm.mapper"></property>
	     <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	 </bean>
	 
	 
		<!--4.注解扫描service  -->
		<!-- 4.开启组件自动扫描，也就是启用注解。前提是导入spring-context-4.2.xsd约束和引入新的命名空间 -->
		<context:component-scan base-package="cn.xm.web.service"></context:component-scan>
	
	
	<!-- 4.配置事务管理器 -->
	<!-- 事务核心管理器，封装了事务操作，依赖于连接池 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 5.开启注解管理aop事务 -->
	<tx:annotation-driven/>
			
</beans>